#==============================================================================
# Misc. Defaults
#==============================================================================

.SUFFIXES:

# Setting default shell to bash. Default shell is /bin/sh which on some Linux distributions (like Ubuntu) does not implement 'source'.
SHELL := /bin/bash

# Characters which cannot be easily escaped.
empty=
space=$(empty) $(empty)
comma=,

BUILD_TYPE ?= debug
BUILD_TYPE := $(shell echo $(BUILD_TYPE) | tr [:upper:] [:lower:])

VIRTUALENV_ROOT := $(CURDIR)/.env

PROTO_SOURCE_DIR := $(CURDIR)/proto
PROTO_PY_DIR := $(CURDIR)/curie

COVERAGE_FLAGS ?=
PROTOC_FLAGS ?=
PYLINT_FLAGS ?= -j4


# If we're running in a virtual environment, explicitly call utils relative to
# the virtual env.
COVERAGE ?= coverage
PYLINT ?= pylint
PIP ?= pip
PROTOC ?= protoc
ifeq ($(VIRTUAL_ENV),)
	PROTOC_FLAGS += --proto_path=$(PROTO_PATH)/src
endif


PYLINT_DISABLE_UNITTEST ?= broad-except import-error invalid-name \
													 missing-docstring no-member no-name-in-module \
													 no-self-use no-value-for-parameter \
													 protected-access too-few-public-methods \
													 too-many-arguments too-many-instance-attributes \
													 too-many-locals too-many-public-methods \
													 too-many-statements redefined-builtin \
													 redefined-outer-name unused-argument unused-variable

PYLINT_FLAGS_UNITTEST := \
	--disable=$(subst $(space),$(comma),$(PYLINT_DISABLE_UNITTEST))


DOCKER_IMAGE_NAME ?= curie


PIP_REQUIREMENTS_IN := $(notdir $(wildcard requirements*.in))
PIP_REQUIREMENTS_TXT := $(addsuffix .txt,$(basename $(PIP_REQUIREMENTS_IN)))


CODEGEN_MARKER ?= $(CURDIR)/.codegen_marker
CODEGEN_MARKER_CIM ?= $(CURDIR)/.codegen_marker_cim
CODEGEN_MARKER_YACC ?= $(CURDIR)/.codegen_marker_yacc
VIRTUALENV_UPDATE_MARKER ?= $(CURDIR)/.venv_update_marker


GENERATED_FILES_CIM := $(CURDIR)//mof_enum_defs.json
GENERATED_FILES_YACC := $(CURDIR)/curie/parsetab.py
GENERATED_FILES := $(addprefix curie/,\
	$(notdir $(GENERATED_FILES_CIM) $(GENERATED_FILES_YACC)))


PROTO_SOURCES := $(notdir $(wildcard $(CURDIR)/proto/*.proto))
PROTO_PY_TARGETS := \
		$(addprefix curie/,$(addsuffix _pb2.py,$(basename $(PROTO_SOURCES))))

  

.PHONY: all
all: protobuf parsers

#==============================================================================
# Code generation
#==============================================================================

curie/%_pb2.py: proto/%.proto
	@echo Compiling $(notdir $<)...
	@$(PROTOC) $(PROTOC_FLAGS) \
	 	--proto_path=$(PROTO_SOURCE_DIR) \
		--python_out=$(PROTO_PY_DIR) \
		$(CURDIR)/$<

$(CODEGEN_MARKER_CIM): $(CURDIR)/cim/*
	@echo Changes to $? require recompiling CIM definitions
	@echo Removing autogenerated files...
	rm -f $(GENERATED_FILES_CIM)
	@touch $@

$(CODEGEN_MARKER_YACC): $(CURDIR)/curie/punit_parser.py
	@echo Changes to $? require recompiling YACC parsers
	@echo Removing autogenerated files...
	rm -f $(GENERATED_FILES_YACC)
	@touch $@

$(CODEGEN_MARKER): $(CODEGEN_MARKER_CIM) $(CODEGEN_MARKER_YACC)
	@touch $@

$(GENERATED_FILES):
	@echo Generating $@...
	@$(CURDIR)/bin/compile_parsers $@

.PHONY: parsers
parsers: $(CODEGEN_MARKER) $(GENERATED_FILES)

.PHONY: protobuf
protobuf: $(PROTO_PY_TARGETS)

.PHONY: clean
clean:
	@echo Cleaning...
	rm -f $(CURDIR)/$(GENERATED_FILES)
	rm -f $(CURDIR)/$(PROTO_PY_TARGETS)
	rm -f $(CODEGEN_MARKER_CIM) $(CODEGEN_MARKER_YACC) $(CODEGEN_MARKER)

#==============================================================================
# Docker
#==============================================================================

.PHONY: docker
docker:
	docker -l debug build --pull -t $(DOCKER_IMAGE_NAME) .

.PHONY: docker-egg
docker-egg: docker docker-protobuf
	docker run -v $(CURDIR):/curie -it $(DOCKER_IMAGE_NAME) \
		python setup.py bdist_egg --exclude-source-files

.PHONY: docker-requirements
docker-requirements: docker
	docker run -v $(CURDIR):/curie -it $(DOCKER_IMAGE_NAME) \
		make requirements

.PHONY: docker-protobuf
docker-protobuf: docker
	docker run -v $(CURDIR):/curie -it $(DOCKER_IMAGE_NAME) \
	 	make protobuf

.PHONY: docker-pylint
docker-pylint: docker
	docker run -v $(CURDIR):/curie -it $(DOCKER_IMAGE_NAME) \
		make pylint

.PHONY: docker-test
docker-test: docker
	docker run -v $(CURDIR):/curie -it $(DOCKER_IMAGE_NAME) bash -c "\
	 	cd /curie && \
	 	make protobuf && \
	 	pip install -e . && \
	 	make test \
	"

#==============================================================================
# pip installation
#==============================================================================

%.txt: %.in
	@echo Generating package requirements from $(notdir $<)...
	$(PIP)-compile --upgrade --output-file $@ $<

requirements-dev.txt: requirements.txt

.PHONY: requirements
requirements: $(PIP_REQUIREMENTS_TXT)

#==============================================================================
# Virtual environment
#==============================================================================

$(VIRTUALENV_ROOT):
	@echo Creating new python2.7 virtual environment at \'$@\'...
	@echo
	virtualenv -p python2.7 $(VIRTUALENV_ROOT)

$(VIRTUALENV_ROOT)/lib: $(VIRTUALENV_UPDATE_MARKER) $(PIP_REQUIREMENTS_TXT) \
	| $(VIRTUALENV_ROOT)
	@echo Updating libs at $@ according to $?...
	@echo
	source $(VIRTUALENV_ROOT)/bin/activate && \
		$(PIP) install --upgrade pip setuptools pip-tools
	source $(VIRTUALENV_ROOT)/bin/activate && \
	 	$(PIP)-sync $(PIP_REQUIREMENTS_TXT)
	source $(VIRTUALENV_ROOT)/bin/activate && \
	 	$(PIP) install -e $(CURDIR)
	@touch $@
	@echo
	@echo Done. Use \'source $(VIRTUALENV_ROOT)/bin/activate\' to activate.

$(VIRTUALENV_UPDATE_MARKER):
	@touch $@

.PHONY: env
env: $(VIRTUALENV_ROOT)/lib

#==============================================================================
# Static analysis
#==============================================================================

.PHONY: pylint
pylint:
# Filter out top-level _pb2.py files. As all _pb2.py files are in the
# top-level, we can include everything in any nested subdirectories.
# Also filter out any other generated files and top-level compiled bytecode.
	-$(PYLINT) $(PYLINT_FLAGS) \
		$(filter-out %.pyc $(GENERATED_FILES) $(PROTO_PY_TARGETS),\
	 		$(addprefix curie/, $(notdir $(wildcard $(CURDIR)/curie/*))))
# Filter many style conventions that are not required of unit tests.
	-$(PYLINT) $(PYLINT_FLAGS) $(PYLINT_FLAGS_UNITTEST) tests

#==============================================================================
# Unit testing
#==============================================================================

.PHONY: test
test: protobuf parsers
	$(COVERAGE) $(COVERAGE_FLAGS) erase && \
		$(COVERAGE) $(COVERAGE_FLAGS) run $(CURDIR)/setup.py test

.coverage:
	-$(COVERAGE) $(COVERAGE_FLAGS) combine

.htmlcov_unit: .coverage
	$(COVERAGE) $(COVERAGE_FLAGS) html --title "Unit Test Coverage" -d $@
	@touch $@

.PHONY: _coverage_report
_coverage_report:
	$(COVERAGE) $(COVERAGE_FLAGS) report

coverage: .coverage _coverage_report | .htmlcov_unit
